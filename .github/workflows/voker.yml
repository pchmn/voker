# This workflow is made to build voker, analyze code, deploy to github pages and make a github release
name: Voker CI/CD

on:
  push:
    # Run on all branches
    branches:
      - "*"
    # Run only if files modified are not github docs
    paths-ignore:
      - "*.md"
      - ".github/docs/**"
  pull_request:
    # Run on all branches
    branches:
      - "*"
    # Run only if files modified are not github docs
    paths-ignore:
      - "*.md"
      - ".github/docs/**"

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  # Build
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - uses: actions/setup-node@v2
        with:
          node-version: "12"

      # ----------------------------------
      #           Yarn cache
      # ----------------------------------
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      # ----------------------------------
      #           Yarn cache
      # ----------------------------------

      # Install dependencies
      - name: INSTALL
        # Install dependencies only if cache was not found to accelerate workflow
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install

      # Build
      - name: BUILD
        run: yarn build

      # Test
      - name: TEST
        run: yarn test:ci  

      # ----------------------------------
      #         Upload artifacts
      # ----------------------------------
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/
      
      - uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage/lcov.info
      # ----------------------------------
      #         Upload artifacts
      # ----------------------------------

  # Coverage (lib package)
  codeAnalysis:
    name: Code Analysis
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ env.GITHUB_TOKEN }}

      # ----------------------------------
      #    Download coverage artifacts
      # ----------------------------------
      - uses: actions/download-artifact@v2
        with:
          name: coverage
      # ----------------------------------
      #    Download coverage artifacts
      # ----------------------------------

      # Update coverage file to codecov
      - name: CODECOV
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info

      # Codacy analysis
      - name: CODACY
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: lcov.info

      # Run sonar scan
      - name: SONAR
        uses: sonarsource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}      

  # Deploy to gh pages
  deploy:
    name: Deploy
    # Deploy only for main branch
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    # Manual deployment
    # See https://devblogs.microsoft.com/devops/i-need-manual-approvers-for-github-actions-and-i-got-them-now/
    environment:
      name: pchmn.github.io/voker
      url: https://pchmn.github.io/voker/
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - uses: actions/setup-node@v2
        with:
          node-version: "12"

      # ----------------------------------
      #     Download dist artifacts
      # ----------------------------------
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist/
      # ----------------------------------
      #     Download dist artifacts
      # ----------------------------------

      # Deploy dist folder to gh pages
      - name: DEPLOY
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ env.GITHUB_TOKEN }}
          publish_dir: ./dist
          user_name: ${{ secrets.GIT_AUTHOR_NAME }}
          user_email: ${{ secrets.GIT_AUTHOR_EMAIL }}

  # Release dist package
  release:
    name: Release
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - uses: actions/setup-node@v2
        with:
          node-version: "12"

      # ----------------------------------
      #           Yarn cache
      # ----------------------------------
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      # ----------------------------------
      #           Yarn cache
      # ----------------------------------

      # ----------------------------------
      #     Download dist artifacts
      # ----------------------------------
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist/
      # ----------------------------------
      #     Download dist artifacts
      # ----------------------------------

      # Install dependencies
      - name: INSTALL
        # Install dependencies only if cache was not found to accelerate workflow
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install

      # Release
      - name: RELEASE
        run: yarn semantic-release
        env:
          GIT_AUTHOR_NAME: ${{ secrets.GIT_AUTHOR_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.GIT_AUTHOR_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}          